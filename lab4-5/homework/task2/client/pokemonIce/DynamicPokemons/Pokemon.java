//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Pokemon.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package DynamicPokemons;

public class Pokemon implements java.lang.Cloneable,
                                java.io.Serializable
{
    public String name;

    public int health;

    public int damage;

    public PokemonType pokemonType;

    public Pokemon()
    {
        this.name = "";
        this.pokemonType = PokemonType.fire;
    }

    public Pokemon(String name, int health, int damage, PokemonType pokemonType)
    {
        this.name = name;
        this.health = health;
        this.damage = damage;
        this.pokemonType = pokemonType;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Pokemon r = null;
        if(rhs instanceof Pokemon)
        {
            r = (Pokemon)rhs;
        }

        if(r != null)
        {
            if(this.name != r.name)
            {
                if(this.name == null || r.name == null || !this.name.equals(r.name))
                {
                    return false;
                }
            }
            if(this.health != r.health)
            {
                return false;
            }
            if(this.damage != r.damage)
            {
                return false;
            }
            if(this.pokemonType != r.pokemonType)
            {
                if(this.pokemonType == null || r.pokemonType == null || !this.pokemonType.equals(r.pokemonType))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::DynamicPokemons::Pokemon");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, name);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, health);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, damage);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pokemonType);
        return h_;
    }

    public Pokemon clone()
    {
        Pokemon c = null;
        try
        {
            c = (Pokemon)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.name);
        ostr.writeInt(this.health);
        ostr.writeInt(this.damage);
        PokemonType.ice_write(ostr, this.pokemonType);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.name = istr.readString();
        this.health = istr.readInt();
        this.damage = istr.readInt();
        this.pokemonType = PokemonType.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Pokemon v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Pokemon ice_read(com.zeroc.Ice.InputStream istr)
    {
        Pokemon v = new Pokemon();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Pokemon> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Pokemon v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Pokemon> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Pokemon.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Pokemon _nullMarshalValue = new Pokemon();

    /** @hidden */
    public static final long serialVersionUID = 1881331400614519832L;
}
