# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Pokemon.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module DynamicPokemons
_M_DynamicPokemons = Ice.openModule('DynamicPokemons')
__name__ = 'DynamicPokemons'

if 'PokemonType' not in _M_DynamicPokemons.__dict__:
    _M_DynamicPokemons.PokemonType = Ice.createTempClass()
    class PokemonType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    PokemonType.fire = PokemonType("fire", 0)
    PokemonType.normal = PokemonType("normal", 1)
    PokemonType.water = PokemonType("water", 2)
    PokemonType.electric = PokemonType("electric", 3)
    PokemonType.grass = PokemonType("grass", 4)
    PokemonType._enumerators = { 0:PokemonType.fire, 1:PokemonType.normal, 2:PokemonType.water, 3:PokemonType.electric, 4:PokemonType.grass }

    _M_DynamicPokemons._t_PokemonType = IcePy.defineEnum('::DynamicPokemons::PokemonType', PokemonType, (), PokemonType._enumerators)

    _M_DynamicPokemons.PokemonType = PokemonType
    del PokemonType

if 'Pokemon' not in _M_DynamicPokemons.__dict__:
    _M_DynamicPokemons.Pokemon = Ice.createTempClass()
    class Pokemon(object):
        def __init__(self, name='', health=0, damage=0, pokemonType=_M_DynamicPokemons.PokemonType.fire):
            self.name = name
            self.health = health
            self.damage = damage
            self.pokemonType = pokemonType

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.health)
            _h = 5 * _h + Ice.getHash(self.damage)
            _h = 5 * _h + Ice.getHash(self.pokemonType)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_DynamicPokemons.Pokemon):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.health is None or other.health is None:
                    if self.health != other.health:
                        return (-1 if self.health is None else 1)
                else:
                    if self.health < other.health:
                        return -1
                    elif self.health > other.health:
                        return 1
                if self.damage is None or other.damage is None:
                    if self.damage != other.damage:
                        return (-1 if self.damage is None else 1)
                else:
                    if self.damage < other.damage:
                        return -1
                    elif self.damage > other.damage:
                        return 1
                if self.pokemonType is None or other.pokemonType is None:
                    if self.pokemonType != other.pokemonType:
                        return (-1 if self.pokemonType is None else 1)
                else:
                    if self.pokemonType < other.pokemonType:
                        return -1
                    elif self.pokemonType > other.pokemonType:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_DynamicPokemons._t_Pokemon)

        __repr__ = __str__

    _M_DynamicPokemons._t_Pokemon = IcePy.defineStruct('::DynamicPokemons::Pokemon', Pokemon, (), (
        ('name', (), IcePy._t_string),
        ('health', (), IcePy._t_int),
        ('damage', (), IcePy._t_int),
        ('pokemonType', (), _M_DynamicPokemons._t_PokemonType)
    ))

    _M_DynamicPokemons.Pokemon = Pokemon
    del Pokemon

if '_t_PokemonSequence' not in _M_DynamicPokemons.__dict__:
    _M_DynamicPokemons._t_PokemonSequence = IcePy.defineSequence('::DynamicPokemons::PokemonSequence', (), _M_DynamicPokemons._t_Pokemon)

if '_t_PokemonDictionary' not in _M_DynamicPokemons.__dict__:
    _M_DynamicPokemons._t_PokemonDictionary = IcePy.defineDictionary('::DynamicPokemons::PokemonDictionary', (), _M_DynamicPokemons._t_PokemonType, _M_DynamicPokemons._t_PokemonSequence)

_M_DynamicPokemons._t_PokemonInterface = IcePy.defineValue('::DynamicPokemons::PokemonInterface', Ice.Value, -1, (), False, True, None, ())

if 'PokemonInterfacePrx' not in _M_DynamicPokemons.__dict__:
    _M_DynamicPokemons.PokemonInterfacePrx = Ice.createTempClass()
    class PokemonInterfacePrx(Ice.ObjectPrx):

        def sortByHealth(self, pokemon, context=None):
            return _M_DynamicPokemons.PokemonInterface._op_sortByHealth.invoke(self, ((pokemon, ), context))

        def sortByHealthAsync(self, pokemon, context=None):
            return _M_DynamicPokemons.PokemonInterface._op_sortByHealth.invokeAsync(self, ((pokemon, ), context))

        def begin_sortByHealth(self, pokemon, _response=None, _ex=None, _sent=None, context=None):
            return _M_DynamicPokemons.PokemonInterface._op_sortByHealth.begin(self, ((pokemon, ), _response, _ex, _sent, context))

        def end_sortByHealth(self, _r):
            return _M_DynamicPokemons.PokemonInterface._op_sortByHealth.end(self, _r)

        def groupByPokemonType(self, pokemon, context=None):
            return _M_DynamicPokemons.PokemonInterface._op_groupByPokemonType.invoke(self, ((pokemon, ), context))

        def groupByPokemonTypeAsync(self, pokemon, context=None):
            return _M_DynamicPokemons.PokemonInterface._op_groupByPokemonType.invokeAsync(self, ((pokemon, ), context))

        def begin_groupByPokemonType(self, pokemon, _response=None, _ex=None, _sent=None, context=None):
            return _M_DynamicPokemons.PokemonInterface._op_groupByPokemonType.begin(self, ((pokemon, ), _response, _ex, _sent, context))

        def end_groupByPokemonType(self, _r):
            return _M_DynamicPokemons.PokemonInterface._op_groupByPokemonType.end(self, _r)

        def comparePokemons(self, pokemons, context=None):
            return _M_DynamicPokemons.PokemonInterface._op_comparePokemons.invoke(self, ((pokemons, ), context))

        def comparePokemonsAsync(self, pokemons, context=None):
            return _M_DynamicPokemons.PokemonInterface._op_comparePokemons.invokeAsync(self, ((pokemons, ), context))

        def begin_comparePokemons(self, pokemons, _response=None, _ex=None, _sent=None, context=None):
            return _M_DynamicPokemons.PokemonInterface._op_comparePokemons.begin(self, ((pokemons, ), _response, _ex, _sent, context))

        def end_comparePokemons(self, _r):
            return _M_DynamicPokemons.PokemonInterface._op_comparePokemons.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_DynamicPokemons.PokemonInterfacePrx.ice_checkedCast(proxy, '::DynamicPokemons::PokemonInterface', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_DynamicPokemons.PokemonInterfacePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::DynamicPokemons::PokemonInterface'
    _M_DynamicPokemons._t_PokemonInterfacePrx = IcePy.defineProxy('::DynamicPokemons::PokemonInterface', PokemonInterfacePrx)

    _M_DynamicPokemons.PokemonInterfacePrx = PokemonInterfacePrx
    del PokemonInterfacePrx

    _M_DynamicPokemons.PokemonInterface = Ice.createTempClass()
    class PokemonInterface(Ice.Object):

        def ice_ids(self, current=None):
            return ('::DynamicPokemons::PokemonInterface', '::Ice::Object')

        def ice_id(self, current=None):
            return '::DynamicPokemons::PokemonInterface'

        @staticmethod
        def ice_staticId():
            return '::DynamicPokemons::PokemonInterface'

        def sortByHealth(self, pokemon, current=None):
            raise NotImplementedError("servant method 'sortByHealth' not implemented")

        def groupByPokemonType(self, pokemon, current=None):
            raise NotImplementedError("servant method 'groupByPokemonType' not implemented")

        def comparePokemons(self, pokemons, current=None):
            raise NotImplementedError("servant method 'comparePokemons' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_DynamicPokemons._t_PokemonInterfaceDisp)

        __repr__ = __str__

    _M_DynamicPokemons._t_PokemonInterfaceDisp = IcePy.defineClass('::DynamicPokemons::PokemonInterface', PokemonInterface, (), None, ())
    PokemonInterface._ice_type = _M_DynamicPokemons._t_PokemonInterfaceDisp

    PokemonInterface._op_sortByHealth = IcePy.Operation('sortByHealth', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_DynamicPokemons._t_PokemonSequence, False, 0),), (), ((), _M_DynamicPokemons._t_PokemonSequence, False, 0), ())
    PokemonInterface._op_groupByPokemonType = IcePy.Operation('groupByPokemonType', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_DynamicPokemons._t_PokemonSequence, False, 0),), (), ((), _M_DynamicPokemons._t_PokemonDictionary, False, 0), ())
    PokemonInterface._op_comparePokemons = IcePy.Operation('comparePokemons', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_DynamicPokemons._t_PokemonSequence, False, 0),), (), ((), _M_DynamicPokemons._t_PokemonSequence, False, 0), ())

    _M_DynamicPokemons.PokemonInterface = PokemonInterface
    del PokemonInterface

# End of module DynamicPokemons
